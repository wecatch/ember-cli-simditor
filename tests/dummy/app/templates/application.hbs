<div class='desc'>
  <h1>ember-cli-simditor
    <a href='https://travis-ci.org/wecatch/ember-cli-simditor'>
      <img
        src='https://travis-ci.org/wecatch/ember-cli-simditor.svg?branch=master'
        alt="cli"
      />
    </a>
  </h1>
  <p>
    Ember component wrapper for simditor editor.
  </p>
  <a href='https://github.com/wecatch/ember-cli-simditor'>Github</a>
  <a href='http://wecatch.me'>Wecatch</a>
</div>
<div class='code'>
  <h1>How to use</h1>
  <p>All simditor options and method support <a href="https://simditor.tower.im/docs/doc-usage.html" >Usage Doc</a> </p>
  <p>Event support with 'on' prefix like 'onValuechanged' == 'valuechanged'</p>
  <p>ApplicationController.js</p>
  <pre>
    <code class="language-javascript" >
      {{render-html "
import Controller from '@ember/controller';
import { action, get } from '@ember/object';

export default class ApplicationController extends Controller {
  constructor() {
    super(...arguments);
    this.editor = null;
  }

  @action
  setValue() {
    this.editor.setValue('<h1>hello simditor</h1>');
  }

  @action
  getValue() {
    window.alert(this.editor.getValue());
  }
  @action
  sync() {
    window.alert(this.editor.sync());
  }
  @action
  focus() {
    this.editor.focus();
  }
  @action
  blur() {
    this.editor.blur();
  }
  @action
  hidePopover() {
    this.editor.hidePopover();
  }
  @action
  valuechanged(e, editor) {
    console.log('valuechanged event: ' + editor.getValue());
  }

  toolbar = [
    'title',
    'bold',
    'italic',
    'underline',
    'strikethrough',
    'fontScale',
    'color',
    'ol', // ordered list
    'ul', // unordered list
    'blockquote',
    'code', // code block
    'table',
    'link',
    'image',
    'hr', // horizontal ruler
    'indent',
    'outdent',
    'alignment',
  ];
}
      "
      "javascript"
      }}
    </code>
  </pre>
  <p>application.hbs</p>
  <pre>
    <code class='language-handlebars'>
      {{render-html "
<SimditorEditor @value={{get this.model 'one'}} @update={{fn (mut this.model.one.content)}} @editor={{fn (mut this.editor)}} @toolbar={{this.toolbar}} @onValuechanged={{this.valuechanged}} ></SimditorEditor>
"
      "handlebars"
      }}
    </code>
  </pre>
  <p>
    <strong>Model object must have one property called content for SimditorEditor component torender.</strong>
  </p>
</div>
<div>
  <h1>Editor methods</h1>
  <button type='button' {{on 'click' this.setValue}}>setValue</button>
  <button type='button' {{on 'click' this.getValue}}>getValue</button>
  <button type='button' {{on 'click' this.sync}}>sync</button>
  <button type='button' {{on 'click' this.focus}}>focus</button>
  <button type='button' {{on 'click' this.blur}}>blur</button>
  <button type='button' {{on 'click' this.hidePopover}}>hidePopover</button>
</div>
<br />
<h1>Editor</h1>
<SimditorEditor
  @value={{get this.model 'one'}}
  @update={{fn (mut this.model.one.content)}}
  @editor={{fn (mut this.editor)}}
  @toolbar={{this.toolbar}}
  @onValuechanged={{this.valuechanged}}
/>
<div>
  <h1>Html content</h1>
  {{this.model.one.content}}
</div>


<h1>
    Locale
</h1>
<div class="code">
    <p>locale only support <em>en-US</em>(English) and <em>zh-CN</em>(Chinese)</p>
    <pre>
          <code class='language-handlebars'>
      {{render-html "
<SimditorEditor @value={{get this.model 'two'}} @locale='zh-CN' @toolbar={{this.toolbar}}></SimditorEditor>
"
      "handlebars"
      }}
    </code>
    </pre>
</div>
<SimditorEditor @value={{get this.model 'two'}} @locale='zh-CN' ></SimditorEditor>

<h1>
    Custome content property name
</h1>
<div class="code">
        <pre>
          <code class='language-handlebars'>
      {{render-html "
<SimditorEditor @value={{get model 'three'}} @name='html' @update={{fn (mut model.three.html}} ></SimditorEditor>
"
      "handlebars"
      }}
    </code>
    </pre>
</div>
<SimditorEditor @value={{get this.model 'three'}} @name="html" @update={{fn (mut @model.three.html)}} ></SimditorEditor>